// lib/utils/phone.js

/**
 * Нормализует номер телефона к международному формату E.164 (например, +1XXXXXXXXXX).
 * Убирает все нецифровые символы.
 * Добавляет +1 для номеров US/Canada, если код страны отсутствует и длина 10 цифр.
 * ВАЖНО: Эту логику нужно адаптировать/улучшить для поддержки других стран, если необходимо.
 * @param {string | null | undefined} phone Исходный номер телефона.
 * @returns {string | null} Нормализованный номер или null, если формат некорректен.
 */
function normalizePhone(phone) {
    if (!phone || typeof phone !== 'string') return null;
    // Убираем всё, кроме цифр
    let digits = phone.replace(/\D/g, '');

    // Если номер начинается с '1' и имеет 11 цифр (типично для США/Канады, когда уже есть код страны)
    if (digits.startsWith('1') && digits.length === 11) {
         // Ничего не делаем, просто добавляем +
    }
    // Если номер 10-значный (предполагаем США/Канаду без кода страны)
    else if (digits.length === 10) {
        digits = '1' + digits; // Добавляем код страны 1
    }
    // Если номер уже содержит код другой страны (начинается не с 1, но длинный)
    // или если он пришел с + - просто проверяем минимальную длину
    else if (digits.length < 10) { // Слишком короткий в любом случае
        return null;
    }
    // Для номеров > 11 цифр считаем, что код страны уже есть

    // Минимальная проверка длины для международного формата
    if (digits.length >= 10) { // Позволим и 10 цифр (если код страны 1 уже там есть неявно)
        return '+' + digits;
    }

    return null; // Если ничего не подошло
}

/**
 * Проверяет базовую валидность номера телефона ПОСЛЕ нормализации.
 * @param {string | null | undefined} phone Нормализованный номер телефона.
 * @returns {boolean} True, если валиден, иначе false.
 */
function validatePhone(phone) {
    // Проверяем, что это строка, начинается с + и имеет разумную длину
    return typeof phone === 'string' && phone.startsWith('+') && phone.length >= 11 && phone.length <= 16;
}

module.exports = { normalizePhone, validatePhone };