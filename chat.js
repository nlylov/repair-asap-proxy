/**
 * Repair ASAP Chatbot –¥–ª—è Tilda
 * –í–µ—Ä—Å–∏—è –¥–ª—è –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç Tilda
 */

// –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
  if (!document.getElementById('repair-asap-chatbot')) {
    const chatbotContainer = document.createElement('div');
    chatbotContainer.id = 'repair-asap-chatbot';
    document.body.appendChild(chatbotContainer);
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç-–±–æ—Ç
  initRepairASAPChatbot();
});

function initRepairASAPChatbot() {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç-–±–æ—Ç–∞
  const config = {
    proxyUrl: 'https://api.asap.repair',
    containerSelector: '#repair-asap-chatbot',
    primaryColor: '#0066CC'
  };
  
  let threadId = null;
  let isInitialized = false;
  let messageQueue = [];
  let envData = null;
  
  // –°–æ–∑–¥–∞–µ–º UI —á–∞—Ç-–±–æ—Ç–∞
  createChatUI();
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API
  init();
  
  async function init() {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
      const envCheck = await fetch(`${config.proxyUrl}/check-env`);
      envData = await envCheck.json();
      
      if (!envData.assistantId || !envData.apiKey) {
        console.error('–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
        return;
      }
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (thread)
      const threadResponse = await fetch(`${config.proxyUrl}/v1/threads`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!threadResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫ –¥–ª—è —á–∞—Ç–∞');
      }
      
      const threadData = await threadResponse.json();
      threadId = threadData.id;
      isInitialized = true;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
      if (messageQueue.length > 0) {
        for (const message of messageQueue) {
          await sendMessage(message);
        }
        messageQueue = [];
      }
      
      console.log('–ß–∞—Ç-–±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞:', error);
    }
  }
  
  async function sendMessage(message) {
    if (!isInitialized) {
      // –ï—Å–ª–∏ —á–∞—Ç-–±–æ—Ç –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
      messageQueue.push(message);
      return { status: 'queued', message: '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏' };
    }
    
    try {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫
      const messageResponse = await fetch(`${config.proxyUrl}/v1/threads/${threadId}/messages`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          role: 'user',
          content: message
        })
      });
      
      if (!messageResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
      
      // –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const runResponse = await fetch(`${config.proxyUrl}/v1/threads/${threadId}/runs`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          assistant_id: envData.assistantId
        })
      });
      
      if (!runResponse.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
      }
      
      const runData = await runResponse.json();
      
      // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      return await waitForCompletion(runData.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç-–±–æ—Ç–∞' };
    }
  }
  
  async function waitForCompletion(runId) {
    let status = 'in_progress';
    
    while (status === 'in_progress' || status === 'queued') {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const response = await fetch(`${config.proxyUrl}/v1/threads/${threadId}/runs/${runId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (!response.ok) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
      }
      
      const data = await response.json();
      status = data.status;
      
      if (status === 'completed') {
        return await getMessages();
      }
      
      if (status === 'failed' || status === 'cancelled') {
        return { error: `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ${status}` };
      }
    }
  }
  
  async function getMessages() {
    const response = await fetch(`${config.proxyUrl}/v1/threads/${threadId}/messages`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' }
    });
    
    if (!response.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
    
    const data = await response.json();
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const assistantMessages = data.data.filter(msg => msg.role === 'assistant');
    
    if (assistantMessages.length === 0) {
      return { error: '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞' };
    }
    
    return {
      content: assistantMessages[0].content[0].text.value,
      messageId: assistantMessages[0].id
    };
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ UI —á–∞—Ç-–±–æ—Ç–∞
  function createChatUI() {
    const container = document.querySelector(config.containerSelector);
    if (!container) {
      console.error(`–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ${config.containerSelector} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞
    container.innerHTML = `
      <div class="chatbot-widget" style="display: none;">
        <div class="chatbot-header" style="background-color: ${config.primaryColor};">
          <h3>Repair ASAP –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</h3>
          <button class="chatbot-close">√ó</button>
        </div>
        <div class="chatbot-messages"></div>
        <div class="chatbot-input">
          <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å...">
          <button style="background-color: ${config.primaryColor};">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </div>
      </div>
      <button class="chatbot-toggle" style="background-color: ${config.primaryColor};">
        <span>üí¨</span>
      </button>
    `;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    const style = document.createElement('style');
    style.textContent = `
      .chatbot-widget {
        position: fixed;
        bottom: 80px;
        right: 20px;
        width: 350px;
        height: 500px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 5px 25px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        font-family: 'Montserrat', sans-serif;
        z-index: 9999;
        overflow: hidden;
      }
      
      .chatbot-header {
        color: white;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .chatbot-header h3 {
        margin: 0;
        font-size: 16px;
      }
      
      .chatbot-close {
        background: none;
        border: none;
        color: white;
        font-size: 20px;
        cursor: pointer;
      }
      
      .chatbot-messages {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        display: flex;
        flex-direction: column;
      }
      
      .message {
        max-width: 80%;
        padding: 10px 15px;
        margin-bottom: 10px;
        border-radius: 18px;
        line-height: 1.4;
      }
      
      .message.user {
        background: #e6f2ff;
        align-self: flex-end;
        border-bottom-right-radius: 5px;
      }
      
      .message.bot {
        background: #f0f0f0;
        align-self: flex-start;
        border-bottom-left-radius: 5px;
      }
      
      .chatbot-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #e0e0e0;
      }
      
      .chatbot-input input {
        flex: 1;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 20px;
        font-family: 'Montserrat', sans-serif;
      }
      
      .chatbot-input button {
        color: white;
        border: none;
        padding: 10px 15px;
        margin-left: 10px;
        border-radius: 20px;
        cursor: pointer;
      }
      
      .chatbot-toggle {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        cursor: pointer;
        border: none;
        box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
        z-index: 9999;
      }
    `;
    
    document.head.appendChild(style);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    const widget = container.querySelector('.chatbot-widget');
    const toggle = container.querySelector('.chatbot-toggle');
    const close = container.querySelector('.chatbot-close');
    const input = container.querySelector('.chatbot-input input');
    const sendButton = container.querySelector('.chatbot-input button');
    const messages = container.querySelector('.chatbot-messages');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —á–∞—Ç-–±–æ—Ç–∞
    toggle.addEventListener('click', () => {
      widget.style.display = 'flex';
      toggle.style.display = 'none';
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —á–∞—Ç –ø—É—Å—Ç
      if (messages.children.length === 0) {
        addMessage('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Repair ASAP. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?', 'bot');
      }
    });
    
    close.addEventListener('click', () => {
      widget.style.display = 'none';
      toggle.style.display = 'flex';
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleSendMessage = async () => {
      const messageText = input.value.trim();
      if (!messageText) return;
      
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ UI
      addMessage(messageText, 'user');
      input.value = '';
      
      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
      const typingIndicator = document.createElement('div');
      typingIndicator.className = 'message bot typing';
      typingIndicator.textContent = '–ü–µ—á–∞—Ç–∞–µ—Ç...';
      messages.appendChild(typingIndicator);
      messages.scrollTop = messages.scrollHeight;
      
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —á–∞—Ç-–±–æ—Ç–∞
      try {
        const response = await sendMessage(messageText);
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        messages.removeChild(typingIndicator);
        
        if (response.error) {
          addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
        } else {
          addMessage(response.content, 'bot');
        }
      } catch (error) {
        messages.removeChild(typingIndicator);
        addMessage('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'bot');
      }
    };
    
    sendButton.addEventListener('click', handleSendMessage);
    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') handleSendMessage();
    });
  }
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ UI
  function addMessage(text, sender) {
    const container = document.querySelector(config.containerSelector);
    if (!container) return;
    
    const messages = container.querySelector('.chatbot-messages');
    if (!messages) return;
    
    const messageElement = document.createElement('div');
    messageElement.className = `message ${sender}`;
    messageElement.textContent = text;
    messages.appendChild(messageElement);
    messages.scrollTop = messages.scrollHeight;
  }
}
